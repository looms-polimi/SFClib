within SFC.BasicBlocks;

model StepNinputs_ "Step with n inputs"
SFC.Interfaces.StepInput IN[n] annotation(
    Placement(visible = true, transformation(origin = {-26, 116}, extent = {{-20, -10}, {20, 10}}, rotation = 0), iconTransformation(origin = {0, 100}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
  SFC.Interfaces.StepOutput OUT annotation(
    Placement(visible = true, transformation(origin = {-116, -40}, extent = {{-20, -10}, {20, 10}}, rotation = 0), iconTransformation(origin = {0, -100}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
  Modelica.Blocks.Interfaces.BooleanOutput X annotation(
    Placement(visible = true, transformation(origin = {-34, 18}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {120, -3.55271e-15}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
  Real t(start=0,fixed=true);
  parameter Integer n;
equation
  der(t) = if X then 1 else 0;
  OUT.active=X; // X da informazioni se lo stato Ã¨ attivo o no
algorithm
for i in 1:n loop
  when change(IN[i].fire) then X:=true; reinit(t,0.0); end when;
  end for;
  when change(OUT.fire) then X:=false; reinit(t,0.0); end when;
initial algorithm
  X := false;
annotation(
    Diagram(coordinateSystem(extent = {{-200, -100}, {200, 100}})),
    Icon(graphics = {Rectangle(fillColor = {238, 238, 236}, fillPattern = FillPattern.Solid, lineThickness = 6.5, extent = {{-100, 100}, {100, -100}}), Text(origin = {-3, 3}, extent = {{-57, 35}, {57, -35}}, textString = "%name")}, coordinateSystem(initialScale = 0.1)),
  Documentation(info = "<html><head></head><body><div style=\"text-align: justify;\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><div style=\"text-align: justify; \">The main features and the structure of a step are illustrated in the <b>Step</b> block of the library and apply for all the steps of a system.&nbsp;</div><div style=\"text-align: justify; \"><div style=\"text-align: start;\"><div style=\"text-align: justify;\"><div><br></div><div><i><u>StepNinputs</u></i> is a variation of the classical Step, because in some cases a step can have more than one input. The block has an additional internal parameter<b> n</b>, that can be manually set to the number of inputs needed.</div></div></div></div></div></body></html>"));

end StepNinputs_;
